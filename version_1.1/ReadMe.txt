Program name:	SACRing.sh

Function:	Sub-Assembly of Chloroplast genome from PE RAD-seq

Citation:	Chao Feng, Meizhen Xu, Chen Feng, Eric J. B. von Wettberg, Ming Kang. The complete chloroplast genome of Primulina and two novel strategies for development of high polymorphic loci for phylogenetic studies. BMC Evolutionary Biology 2017;

Author:	Chao Feng (chaofeng@scbg.ac.cn)

Release date:	Jul. 15th, 2017

Version:	Version 1.1

Software:	This program is deponded on the following softwares, bowtie ("http://bowtie-bio.sourceforge.net/index.shtml"), bowtie2 ("http://bowtie-bio.sourceforge.net/bowtie2/index.shtml"), Stacks ("http://catchenlab.life.illinois.edu/stacks"), CAP3 ("http://seq.cs.iastate.edu/cap3.html") and blat ("https://users.soe.ucsc.edu/~kent/src"). Please make sure they have been installed and avaliable in your directory.

Preparation:	1) Put a single reference chloroplast genome (fa format) in the folder of RefFile.
		2) Put all the PE-end RAD-Seq (fq format) in the folder of FastqFile. Read1 (next to restriction site) should be named as $sample_1.fq, the other one as $sample_2.fq, e.g.: CZYX01-2_1.fq, CZYX01-2_2.fq.

Usage:	nohup sh SACRing.sh $Ref $3'cohesive_end $Overlap_of_paired_tags $Read1_len $Read2_len $ThreadNumber >$Log 2>&1 &
		$Ref: File of Reference cp genome, including the path, e.g. RefFile/WHY01.fa.
		$3'cohesive_end: 3'end of restriction enzyme used in RAD-Seq, e.g. EcoR I (G'AATTC) was used in RAD-Seq, here print AATTC.
		$Overlap_of_paired_tags: It was counted as following formula: the length of restriction enzyme - (Enzyme cutting position) x 2, e.g. EcoR I (G'AATTC) was used in RAD-Seq, here print 4 (6 - 1 x 2 = 4).
		$Read1_len: the length of read1 in fastq file, e.g. 100.
		$Read2_len: the length of read2 in fastq file, e.g. 100.
		$ThreadNumber: Max Thread can be used in this analysis.
		$Log: Record of output on the screen.
	**E.g.: nohup sh SACRing.sh RefFile/WHY01.fa AATTC 4 100 100 20 >Log.txt 2>&1 &

Note:	1) Make sure that only three folders (RefFile, FastqFile and PerlScript) and three files (SACRing.sh, ReadMe, Pipeline.pdf) are existed in your work folder. Only the fq files which need to be analyzed exist in the folder of FastqFile, and only a fa file in RefFile.
	2) There are an example of Ref and fq files in the corresponding folders to test whether the software required are prepared, and this pipeline is OK for your Linux system. Please delete the example files before running of your own data.
	3) The fastq files with different length of read1/read2 pairs should be analyzed respectively. And all the read1 or read2 in a fastq file used in this pipeline should have uniform length.

Output description:	
	1) RefFile
		RegionBoundary: the length and sequences of the regions of LSC, IRb, SSC and IRa.
		Cp_complete.fa: the sequence of ref cp genome with a new uniform name.
		Cp_nr.fa: the sequence of the regions of LSC, IRb and SSC, excluding the IRa region.

	2) FastqFile
		Fq.list: list of the samples used in this analysis.
	
	3) RAD_cp
		Each sample would generate 2 fq files (*.cp_1.fq; *.cp_2.fq), which are the deep sequencing data related to cp genome.

	4) RAD_tag
		Each sample would generate 2 fa files (*.tag1.fa; *.tag2.fa).
		*.tag1.fa: the fa file of tag1 sequences, which are clustered from read1s. Two paired tag1s were merged in to one sequences.
			The id of fa files, e.g. >tag1.49789.P_234_235, >tag1.6923.-_302, >tag1.54565.+_250.
			The 1st part: uniform ">tag1".
			The 2nd part: the site of enzyme cutting position of tag1s, e.g. 49789, 6923, 54565.
			The 3rd part: "P", "-" and "+" represent the tags are paired, single and mapped to the negative strand, single and mapped to positive strand, respectively.
			The 4th part: the id of tag1s generated by the software of Stacks, e.g. 234, 235, 302 and 250.

		*.tag2.fa: the fa of tag2 sequences. Based on PE relationship, the read2s with same tag1 cluster are extracted and further assembled.
			The id of fa files, e.g. >tag2_115, >tag2_116. 115, 116 are the id of tag2, same to its corresponding tag1 id generated by the software of Stacks.
	
	5) RAD_assembly
		Each sample would generate 5 files (*.RAD_poTs, *.RAD_poTs.Stat, *.RAD_CpContigs, *.RAD_CpContigs.Stat, *.RAD_sub-super-marker).
		*.RAD_poTs: The sequences of contigs assembled from Tag1s (clustered from read1 of RAD-Seq) at forward and reverse directions of the same restriction enzyme site and their corresponding Tag2s (assembled from read2s of RAD-Seq).
			The id of fa (>), e.g. 100735P__CZYX01-1, 105533P__CZYX01-1. 100735 and 105533 indicate that the site of Enzyme cutting position of paired tag1; P is short for Paired; CZYX01-1 is the sample ID.

		*.RAD_poTs.Stat: The information of each sequence in RAD_Tags. e.g. "3388	4672	4053P__CZYX01-1	1284"; "12765	14118	13442P__CZYX01-1	1353".
			The 1st column: the start position of the poTs mapped to reference, e.g., 3388, 12765.
			The 2nd column: the end position of the poTs mapped to reference, e.g., 4672, 14118.
			The 3rd column: the id of the poTs, same to the id of RAD_Tag, e.g., 4053P__CZYX01-1, 13442P__CZYX01-1.
			The 4th column: the length of the poTs, e.g., 1284, 1353.

		*.RAD_CpContigs: The assembly configs from RAD cp data.
			The id of fa (>), e.g., CpContig_1__CZYX01-11, CpContig_2__CZYX01-11. CZYX01-11 is the sample ID.

		*.RAD_CpContigs.Stat: The information of longer sequences without unknown nucleotides, which was assembled from all the kinds of tags, according to their position and overlap information, e.g., "3388	4786	CpContig_1__CZYX01-1	1398"; "6446	6927	CpContig_2__CZYX01-1	481".
			The 1st column: the start position of the CpContigs mapped to reference, e.g., 3388, 6446.
			The 2nd column: the end position of the CpContigs mapped to reference, e.g., 4786, 6927.
			The 3rd column: the id of the CpContigs, e.g., CpContig_1__CZYX01-11, CpContig_2__CZYX01-11.
			The 4th column: the length of the CpContig, e.g., 1398, 481.

		*.RAD_sub-super-marker: The assembly scaffold from RAD cp data. The gaps between two adjacent sequences in RAD_Asmb were filled with "-", and further assembled into only one scaffold.

Detail description of pipeline [pipeline.pdf]:
	First, paired-end RAD-Seq data was separated in different samples according to adapters (Fig. 1a). Following quality control (Additional file 7: Table S5, https://github.com/scbgfengchao/) and previous analysis (Step 1 in SACRing), the cp-related data was extracted from PE RAD-Seq based on mapping results (Step 2 in SACRing). And then, Step 3, the core step, was used for basic clustering and assembly. Hundreds of thousands of Read1 were mapped back to the specific regions of Ref and clustered into several Tag1s. While hundreds or thousands of Read2, which belonged to the same Tag1, were further assembled into a longer Tag2. This step is the most rate-limiting one, so multi-core CPU scripts were designed to linearly shorten the run time. Step 4 was used to constantly and continually assemble for a better result. Tag1s at the same position were mixed into one sequence with the name of paired tags (pTs). Meanwhile, Tag1 and its paired Tag2 were assembled in a contig, and named as overlap tags (oTs). If both Tag1s of pT has an overlap with their paired Tag2s, a longer contig was generated, and defined as poTs, i.e. short for paired & overlap tags. In addition, several longer contigs (defined as CpContigs) were assembled according to overlap information. And a scaffold (sub-super-marker) was further generated according to the position information, replacing the unknown bases with ¡®-¡¯ (Fig. 1b). Finally, poTs and CpContigs / sub-super-marker could beclustered and used for further population genetic and phylogenetic studies (Fig. c).

Reference:
	Chao Feng, Meizhen Xu, Chen Feng, Eric J. B. von Wettberg, Ming Kang. The complete chloroplast genome of Primulina and two novel strategies for development of high polymorphic loci for phylogenetic studies. BMC Evolutionary Biology 2017;
			